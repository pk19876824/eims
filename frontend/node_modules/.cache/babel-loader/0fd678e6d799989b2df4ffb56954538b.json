{"ast":null,"code":"import _objectSpread from \"/Users/zhangjunjie/WebstormProjects/eims-react1/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/MyTable.js\";\nimport React, { Component } from 'react';\nimport { Button, Icon, Input, Table } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport reqwest from 'reqwest';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  sorter: true,\n  render: name => \"\".concat(name),\n  width: '20%'\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  sorter: true,\n  width: '20%'\n}, {\n  title: '性别',\n  dataIndex: 'gender',\n  filters: [{\n    text: 'Male',\n    value: '0'\n  }, {\n    text: 'Female',\n    value: '1'\n  }],\n  width: '20%'\n}, {\n  title: '部门',\n  dataIndex: 'department',\n  filters: [{\n    text: '产品部',\n    value: '1'\n  }, {\n    text: '技术部',\n    value: '2'\n  }, {\n    text: '运营部',\n    value: '3'\n  }, {\n    text: '行政部',\n    value: '4'\n  }, {\n    text: '采购部',\n    value: '5'\n  }],\n  width: '20%'\n}, {\n  title: '职位',\n  dataIndex: 'level',\n  filters: [{\n    text: '普通职员',\n    value: '1'\n  }, {\n    text: '组长',\n    value: '2'\n  }, {\n    text: '经理',\n    value: '3'\n  }, {\n    text: '总监',\n    value: '4'\n  }, {\n    text: '董事长',\n    value: '5'\n  }],\n  width: '20%'\n}];\n\nclass MyTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetch = (params = {}) => {\n      console.log('params:', params);\n      this.setState({\n        loading: true\n      });\n      reqwest({\n        url: MyTable.searchUrl,\n        method: 'get',\n        data: _objectSpread({\n          results: 10\n        }, params),\n        type: 'json'\n      }).then(data => {\n        const pagination = _objectSpread({}, this.state.pagination); // Read total count from server\n        // pagination.total = data.totalCount;\n\n\n        pagination.total = data.data.count;\n        this.setState({\n          loading: false,\n          data: data.data.results,\n          pagination\n        });\n      });\n    };\n\n    this.handleTableChange = (pagination, filters, sorter) => {\n      const pager = _objectSpread({}, this.state.pagination);\n\n      pager.current = pagination.current;\n      this.setState({\n        pagination: pager\n      });\n      this.fetch(_objectSpread({\n        results: pagination.pageSize,\n        page: pagination.current,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }, filters));\n    };\n\n    this.state = {\n      data: [],\n      pagination: {},\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetch();\n  }\n\n  /*handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.setState({searchText: selectedKeys[0]});\n  };\n   handleReset = (clearFilters) => {\n      clearFilters();\n      this.setState({searchText: ''});\n  };\n   getColumnSearchProps = (dataIndex) => ({\n      filterDropdown: ({\n                           setSelectedKeys, selectedKeys, confirm, clearFilters,\n                       }) => (\n          <div style={{padding: 8}}>\n              <Input\n                  ref={node => {\n                      this.searchInput = node;\n                  }}\n                  placeholder={`Search ${dataIndex}`}\n                  value={selectedKeys[0]}\n                  onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                  onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                  style={{width: 188, marginBottom: 8, display: 'block'}}\n              />\n              <Button\n                  type=\"primary\"\n                  onClick={() => this.handleSearch(selectedKeys, confirm)}\n                  icon=\"search\"\n                  size=\"small\"\n                  style={{width: 90, marginRight: 8}}\n              >\n                  Search\n              </Button>\n              <Button\n                  onClick={() => this.handleReset(clearFilters)}\n                  size=\"small\"\n                  style={{width: 90}}\n              >\n                  Reset\n              </Button>\n          </div>\n      ),\n      filterIcon: filtered => <Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}}/>,\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: (visible) => {\n          if (visible) {\n              setTimeout(() => this.searchInput.select());\n          }\n      },\n      render: (text) => (\n          <Highlighter\n              highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n              searchWords={[this.state.searchText]}\n              autoEscape\n              textToHighlight={text.toString()}\n          />\n      ),\n  });*/\n  render() {\n    /*const columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        width: '30%',\n        ...this.getColumnSearchProps('name'),\n    }, {\n        title: 'Age',\n        dataIndex: 'age',\n        key: 'age',\n        width: '20%',\n        ...this.getColumnSearchProps('age'),\n    }, {\n        title: 'Gender',\n        dataIndex: 'gender',\n        key: 'gender',\n        ...this.getColumnSearchProps('gender'),\n    }, {\n        title: 'Department',\n        dataIndex: 'department',\n        key: 'department',\n        ...this.getColumnSearchProps('department'),\n    }, {\n        title: 'Level',\n        dataIndex: 'level',\n        key: 'level',\n        ...this.getColumnSearchProps('level'),\n    }];\n    //const data = this.props;\n    const data = [{\n        key: '1',\n        name: 'John Brown',\n        age: 32,\n        gender: '男',\n        department: '采购部',\n        level: '经理'\n    }, {\n        key: '2',\n        name: 'Joe Black',\n        age: 42,\n        gender: '男',\n        department: '行政部',\n        level: '董事长'\n    }];*/\n    return React.createElement(Table, {\n      columns: columns,\n      rowKey: record => record.id,\n      dataSource: this.state.data,\n      pagination: this.state.pagination,\n      loading: this.state.loading,\n      onChange: this.handleTableChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    });\n  }\n\n}\n\nMyTable.searchUrl = 'http://localhost:8888/employee';\nexport default MyTable;","map":{"version":3,"sources":["/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/MyTable.js"],"names":["React","Component","Button","Icon","Input","Table","Highlighter","reqwest","columns","title","dataIndex","sorter","render","name","width","filters","text","value","MyTable","constructor","props","fetch","params","console","log","setState","loading","url","searchUrl","method","data","results","type","then","pagination","state","total","count","handleTableChange","pager","current","pageSize","page","sortField","field","sortOrder","order","componentDidMount","record","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Icon, Input, Table} from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport reqwest from 'reqwest';\n\nconst columns = [{\n    title: '姓名',\n    dataIndex: 'name',\n    sorter: true,\n    render: name => `${name}`,\n    width: '20%',\n}, {\n    title: '年龄',\n    dataIndex: 'age',\n    sorter: true,\n    width:'20%'\n},{\n    title: '性别',\n    dataIndex: 'gender',\n    filters: [\n        { text: 'Male', value: '0' },\n        { text: 'Female', value: '1' },\n    ],\n    width: '20%',\n}, {\n    title:'部门',\n    dataIndex:'department',\n    filters:[\n        {text:'产品部',value:'1'},\n        {text:'技术部',value:'2'},\n        {text:'运营部',value:'3'},\n        {text:'行政部',value:'4'},\n        {text:'采购部',value:'5'},\n    ],\n    width:'20%',\n},{\n    title:'职位',\n    dataIndex:'level',\n    filters:[\n        {text:'普通职员',value:'1'},\n        {text:'组长',value:'2'},\n        {text:'经理',value:'3'},\n        {text:'总监',value:'4'},\n        {text:'董事长',value:'5'},\n    ],\n    width:'20%',\n}];\n\nclass MyTable extends Component {\n\n    static searchUrl = 'http://localhost:8888/employee';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            pagination: {},\n            loading: false,\n        };\n    };\n\n    componentDidMount() {\n        this.fetch();\n    }\n\n    fetch = (params = {}) => {\n        console.log('params:', params);\n        this.setState({ loading: true });\n        reqwest({\n            url: MyTable.searchUrl,\n            method: 'get',\n            data: {\n                results: 10,\n                ...params,\n            },\n            type: 'json',\n        }).then((data) => {\n            const pagination = { ...this.state.pagination };\n            // Read total count from server\n            // pagination.total = data.totalCount;\n            pagination.total = data.data.count;\n            this.setState({\n                loading: false,\n                data: data.data.results,\n                pagination,\n            });\n        });\n    };\n\n    handleTableChange = (pagination, filters, sorter) => {\n        const pager = { ...this.state.pagination };\n        pager.current = pagination.current;\n        this.setState({\n            pagination: pager,\n        });\n        this.fetch({\n            results: pagination.pageSize,\n            page: pagination.current,\n            sortField: sorter.field,\n            sortOrder: sorter.order,\n            ...filters,\n        });\n    };\n\n    /*handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({searchText: selectedKeys[0]});\n    };\n\n    handleReset = (clearFilters) => {\n        clearFilters();\n        this.setState({searchText: ''});\n    };\n\n    getColumnSearchProps = (dataIndex) => ({\n        filterDropdown: ({\n                             setSelectedKeys, selectedKeys, confirm, clearFilters,\n                         }) => (\n            <div style={{padding: 8}}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{width: 188, marginBottom: 8, display: 'block'}}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{width: 90, marginRight: 8}}\n                >\n                    Search\n                </Button>\n                <Button\n                    onClick={() => this.handleReset(clearFilters)}\n                    size=\"small\"\n                    style={{width: 90}}\n                >\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => <Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}}/>,\n        onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: (visible) => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: (text) => (\n            <Highlighter\n                highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });*/\n\n    render() {\n        /*const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            width: '30%',\n            ...this.getColumnSearchProps('name'),\n        }, {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n            width: '20%',\n            ...this.getColumnSearchProps('age'),\n        }, {\n            title: 'Gender',\n            dataIndex: 'gender',\n            key: 'gender',\n            ...this.getColumnSearchProps('gender'),\n        }, {\n            title: 'Department',\n            dataIndex: 'department',\n            key: 'department',\n            ...this.getColumnSearchProps('department'),\n        }, {\n            title: 'Level',\n            dataIndex: 'level',\n            key: 'level',\n            ...this.getColumnSearchProps('level'),\n        }];\n        //const data = this.props;\n        const data = [{\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            gender: '男',\n            department: '采购部',\n            level: '经理'\n        }, {\n            key: '2',\n            name: 'Joe Black',\n            age: 42,\n            gender: '男',\n            department: '行政部',\n            level: '董事长'\n        }];*/\n        return (\n            <Table\n                columns={columns}\n                rowKey={record => record.id}\n                dataSource={this.state.data}\n                pagination={this.state.pagination}\n                loading={this.state.loading}\n                onChange={this.handleTableChange}\n            />\n        )\n    };\n}\n\nexport default MyTable;"]},"metadata":{},"sourceType":"module"}
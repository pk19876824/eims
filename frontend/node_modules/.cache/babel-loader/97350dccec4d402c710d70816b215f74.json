{"ast":null,"code":"import _objectSpread from \"/Users/zhangjunjie/WebstormProjects/eims-react1/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/MyTable.js\";\nimport React, { Component } from 'react';\nimport { Button, Icon, Input, Table } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport reqwest from 'reqwest';\n\nclass MyTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetch = (params = {}) => {\n      console.log('params:', params);\n      this.setState({\n        loading: true\n      });\n      reqwest({\n        url: 'https://randomuser.me/api',\n        method: 'get',\n        data: _objectSpread({\n          results: 10\n        }, params),\n        type: 'json'\n      }).then(data => {\n        const pagination = _objectSpread({}, this.state.pagination); // Read total count from server\n        // pagination.total = data.totalCount;\n\n\n        pagination.total = 200;\n        this.setState({\n          loading: false,\n          data: data.results,\n          pagination\n        });\n      });\n    };\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0]\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })\n    });\n\n    this.state = {\n      data: [],\n      pagination: {},\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetch();\n  }\n\n  render() {\n    const columns = [_objectSpread({\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      width: '30%'\n    }, this.getColumnSearchProps('name')), _objectSpread({\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      width: '20%'\n    }, this.getColumnSearchProps('age')), _objectSpread({\n      title: 'Gender',\n      dataIndex: 'gender',\n      key: 'gender'\n    }, this.getColumnSearchProps('gender')), _objectSpread({\n      title: 'Department',\n      dataIndex: 'department',\n      key: 'department'\n    }, this.getColumnSearchProps('department')), _objectSpread({\n      title: 'Level',\n      dataIndex: 'level',\n      key: 'level'\n    }, this.getColumnSearchProps('level'))]; //const data = this.props;\n\n    const data = [{\n      key: '1',\n      name: 'John Brown',\n      age: 32,\n      gender: '男',\n      department: '采购部',\n      level: '经理'\n    }, {\n      key: '2',\n      name: 'Joe Black',\n      age: 42,\n      gender: '男',\n      department: '行政部',\n      level: '董事长'\n    }];\n    return React.createElement(Table, {\n      columns: columns,\n      rowKey: record => record.login.uuid,\n      dataSource: this.state.data,\n      pagination: this.state.pagination,\n      loading: this.state.loading,\n      onChange: this.handleTableChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default MyTable;","map":{"version":3,"sources":["/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/MyTable.js"],"names":["React","Component","Button","Icon","Input","Table","Highlighter","reqwest","MyTable","constructor","props","fetch","params","console","log","setState","loading","url","method","data","results","type","then","pagination","state","total","handleSearch","selectedKeys","confirm","searchText","handleReset","clearFilters","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","padding","node","searchInput","e","target","value","width","marginBottom","display","marginRight","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","componentDidMount","columns","title","key","name","age","gender","department","level","login","uuid","handleTableChange"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,KAA7B,QAAyC,MAAzC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,MAAMC,OAAN,SAAsBP,SAAtB,CAAgC;AAC5BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBC,KAbmB,GAaX,CAACC,MAAM,GAAG,EAAV,KAAiB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,WAAKG,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACAT,MAAAA,OAAO,CAAC;AACJU,QAAAA,GAAG,EAAE,2BADD;AAEJC,QAAAA,MAAM,EAAE,KAFJ;AAGJC,QAAAA,IAAI;AACAC,UAAAA,OAAO,EAAE;AADT,WAEGR,MAFH,CAHA;AAOJS,QAAAA,IAAI,EAAE;AAPF,OAAD,CAAP,CAQGC,IARH,CAQSH,IAAD,IAAU;AACd,cAAMI,UAAU,qBAAQ,KAAKC,KAAL,CAAWD,UAAnB,CAAhB,CADc,CAEd;AACA;;;AACAA,QAAAA,UAAU,CAACE,KAAX,GAAmB,GAAnB;AACA,aAAKV,QAAL,CAAc;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVG,UAAAA,IAAI,EAAEA,IAAI,CAACC,OAFD;AAGVG,UAAAA;AAHU,SAAd;AAKH,OAlBD;AAmBH,KAnCkB;;AAAA,SAqCnBG,YArCmB,GAqCJ,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACtCA,MAAAA,OAAO;AACP,WAAKb,QAAL,CAAc;AAACc,QAAAA,UAAU,EAAEF,YAAY,CAAC,CAAD;AAAzB,OAAd;AACH,KAxCkB;;AAAA,SA0CnBG,WA1CmB,GA0CJC,YAAD,IAAkB;AAC5BA,MAAAA,YAAY;AACZ,WAAKhB,QAAL,CAAc;AAACc,QAAAA,UAAU,EAAE;AAAb,OAAd;AACH,KA7CkB;;AAAA,SA+CnBG,oBA/CmB,GA+CKC,SAAD,KAAgB;AACnCC,MAAAA,cAAc,EAAE,CAAC;AACIC,QAAAA,eADJ;AACqBR,QAAAA,YADrB;AACmCC,QAAAA,OADnC;AAC4CG,QAAAA;AAD5C,OAAD,KAGZ;AAAK,QAAA,KAAK,EAAE;AAACK,UAAAA,OAAO,EAAE;AAAV,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEC,IAAI,IAAI;AACT,eAAKC,WAAL,GAAmBD,IAAnB;AACH,SAHL;AAII,QAAA,WAAW,mBAAYJ,SAAZ,CAJf;AAKI,QAAA,KAAK,EAAEN,YAAY,CAAC,CAAD,CALvB;AAMI,QAAA,QAAQ,EAAEY,CAAC,IAAIJ,eAAe,CAACI,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,CAACF,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,GAAoC,EAArC,CANlC;AAOI,QAAA,YAAY,EAAE,MAAM,KAAKf,YAAL,CAAkBC,YAAlB,EAAgCC,OAAhC,CAPxB;AAQI,QAAA,KAAK,EAAE;AAACc,UAAAA,KAAK,EAAE,GAAR;AAAaC,UAAAA,YAAY,EAAE,CAA3B;AAA8BC,UAAAA,OAAO,EAAE;AAAvC,SARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAWI,oBAAC,MAAD;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,OAAO,EAAE,MAAM,KAAKlB,YAAL,CAAkBC,YAAlB,EAAgCC,OAAhC,CAFnB;AAGI,QAAA,IAAI,EAAC,QAHT;AAII,QAAA,IAAI,EAAC,OAJT;AAKI,QAAA,KAAK,EAAE;AAACc,UAAAA,KAAK,EAAE,EAAR;AAAYG,UAAAA,WAAW,EAAE;AAAzB,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,EAoBI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,MAAM,KAAKf,WAAL,CAAiBC,YAAjB,CADnB;AAEI,QAAA,IAAI,EAAC,OAFT;AAGI,QAAA,KAAK,EAAE;AAACW,UAAAA,KAAK,EAAE;AAAR,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBJ,CAJ+B;AAiCnCI,MAAAA,UAAU,EAAEC,QAAQ,IAAI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAoB,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAED,QAAQ,GAAG,SAAH,GAAeE;AAA/B,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjCW;AAkCnCC,MAAAA,QAAQ,EAAE,CAACT,KAAD,EAAQU,MAAR,KAAmBA,MAAM,CAAClB,SAAD,CAAN,CAAkBmB,QAAlB,GAA6BC,WAA7B,GAA2CC,QAA3C,CAAoDb,KAAK,CAACY,WAAN,EAApD,CAlCM;AAmCnCE,MAAAA,6BAA6B,EAAGC,OAAD,IAAa;AACxC,YAAIA,OAAJ,EAAa;AACTC,UAAAA,UAAU,CAAC,MAAM,KAAKnB,WAAL,CAAiBoB,MAAjB,EAAP,CAAV;AACH;AACJ,OAvCkC;AAwCnCC,MAAAA,MAAM,EAAGC,IAAD,IACJ,oBAAC,WAAD;AACI,QAAA,cAAc,EAAE;AAACC,UAAAA,eAAe,EAAE,SAAlB;AAA6BzB,UAAAA,OAAO,EAAE;AAAtC,SADpB;AAEI,QAAA,WAAW,EAAE,CAAC,KAAKZ,KAAL,CAAWK,UAAZ,CAFjB;AAGI,QAAA,UAAU,MAHd;AAII,QAAA,eAAe,EAAE+B,IAAI,CAACR,QAAL,EAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzC+B,KAAhB,CA/CJ;;AAEf,SAAK5B,KAAL,GAAa;AACTL,MAAAA,IAAI,EAAE,EADG;AAETI,MAAAA,UAAU,EAAE,EAFH;AAGTP,MAAAA,OAAO,EAAE;AAHA,KAAb;AAKH;;AAED8C,EAAAA,iBAAiB,GAAG;AAChB,SAAKnD,KAAL;AACH;;AAsFDgD,EAAAA,MAAM,GAAG;AACL,UAAMI,OAAO,GAAG;AACZC,MAAAA,KAAK,EAAE,MADK;AAEZ/B,MAAAA,SAAS,EAAE,MAFC;AAGZgC,MAAAA,GAAG,EAAE,MAHO;AAIZvB,MAAAA,KAAK,EAAE;AAJK,OAKT,KAAKV,oBAAL,CAA0B,MAA1B,CALS;AAOZgC,MAAAA,KAAK,EAAE,KAPK;AAQZ/B,MAAAA,SAAS,EAAE,KARC;AASZgC,MAAAA,GAAG,EAAE,KATO;AAUZvB,MAAAA,KAAK,EAAE;AAVK,OAWT,KAAKV,oBAAL,CAA0B,KAA1B,CAXS;AAaZgC,MAAAA,KAAK,EAAE,QAbK;AAcZ/B,MAAAA,SAAS,EAAE,QAdC;AAeZgC,MAAAA,GAAG,EAAE;AAfO,OAgBT,KAAKjC,oBAAL,CAA0B,QAA1B,CAhBS;AAkBZgC,MAAAA,KAAK,EAAE,YAlBK;AAmBZ/B,MAAAA,SAAS,EAAE,YAnBC;AAoBZgC,MAAAA,GAAG,EAAE;AApBO,OAqBT,KAAKjC,oBAAL,CAA0B,YAA1B,CArBS;AAuBZgC,MAAAA,KAAK,EAAE,OAvBK;AAwBZ/B,MAAAA,SAAS,EAAE,OAxBC;AAyBZgC,MAAAA,GAAG,EAAE;AAzBO,OA0BT,KAAKjC,oBAAL,CAA0B,OAA1B,CA1BS,EAAhB,CADK,CA6BL;;AACA,UAAMb,IAAI,GAAG,CAAC;AACV8C,MAAAA,GAAG,EAAE,GADK;AAEVC,MAAAA,IAAI,EAAE,YAFI;AAGVC,MAAAA,GAAG,EAAE,EAHK;AAIVC,MAAAA,MAAM,EAAE,GAJE;AAKVC,MAAAA,UAAU,EAAE,KALF;AAMVC,MAAAA,KAAK,EAAE;AANG,KAAD,EAOV;AACCL,MAAAA,GAAG,EAAE,GADN;AAECC,MAAAA,IAAI,EAAE,WAFP;AAGCC,MAAAA,GAAG,EAAE,EAHN;AAICC,MAAAA,MAAM,EAAE,GAJT;AAKCC,MAAAA,UAAU,EAAE,KALb;AAMCC,MAAAA,KAAK,EAAE;AANR,KAPU,CAAb;AAeA,WACI,oBAAC,KAAD;AACI,MAAA,OAAO,EAAEP,OADb;AAEI,MAAA,MAAM,EAAEZ,MAAM,IAAIA,MAAM,CAACoB,KAAP,CAAaC,IAFnC;AAGI,MAAA,UAAU,EAAE,KAAKhD,KAAL,CAAWL,IAH3B;AAII,MAAA,UAAU,EAAE,KAAKK,KAAL,CAAWD,UAJ3B;AAKI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWR,OALxB;AAMI,MAAA,QAAQ,EAAE,KAAKyD,iBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAUH;;AAzJ2B;;AA4JhC,eAAejE,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Icon, Input, Table} from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport reqwest from 'reqwest';\n\nclass MyTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            pagination: {},\n            loading: false,\n        };\n    };\n\n    componentDidMount() {\n        this.fetch();\n    }\n\n    fetch = (params = {}) => {\n        console.log('params:', params);\n        this.setState({ loading: true });\n        reqwest({\n            url: 'https://randomuser.me/api',\n            method: 'get',\n            data: {\n                results: 10,\n                ...params,\n            },\n            type: 'json',\n        }).then((data) => {\n            const pagination = { ...this.state.pagination };\n            // Read total count from server\n            // pagination.total = data.totalCount;\n            pagination.total = 200;\n            this.setState({\n                loading: false,\n                data: data.results,\n                pagination,\n            });\n        });\n    }\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({searchText: selectedKeys[0]});\n    };\n\n    handleReset = (clearFilters) => {\n        clearFilters();\n        this.setState({searchText: ''});\n    };\n\n    getColumnSearchProps = (dataIndex) => ({\n        filterDropdown: ({\n                             setSelectedKeys, selectedKeys, confirm, clearFilters,\n                         }) => (\n            <div style={{padding: 8}}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{width: 188, marginBottom: 8, display: 'block'}}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{width: 90, marginRight: 8}}\n                >\n                    Search\n                </Button>\n                <Button\n                    onClick={() => this.handleReset(clearFilters)}\n                    size=\"small\"\n                    style={{width: 90}}\n                >\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => <Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}}/>,\n        onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: (visible) => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: (text) => (\n            <Highlighter\n                highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });\n\n    render() {\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            width: '30%',\n            ...this.getColumnSearchProps('name'),\n        }, {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n            width: '20%',\n            ...this.getColumnSearchProps('age'),\n        }, {\n            title: 'Gender',\n            dataIndex: 'gender',\n            key: 'gender',\n            ...this.getColumnSearchProps('gender'),\n        }, {\n            title: 'Department',\n            dataIndex: 'department',\n            key: 'department',\n            ...this.getColumnSearchProps('department'),\n        }, {\n            title: 'Level',\n            dataIndex: 'level',\n            key: 'level',\n            ...this.getColumnSearchProps('level'),\n        }];\n        //const data = this.props;\n        const data = [{\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            gender: '男',\n            department: '采购部',\n            level: '经理'\n        }, {\n            key: '2',\n            name: 'Joe Black',\n            age: 42,\n            gender: '男',\n            department: '行政部',\n            level: '董事长'\n        }];\n        return (\n            <Table\n                columns={columns}\n                rowKey={record => record.login.uuid}\n                dataSource={this.state.data}\n                pagination={this.state.pagination}\n                loading={this.state.loading}\n                onChange={this.handleTableChange}\n            />\n        )\n    };\n}\n\nexport default MyTable;"]},"metadata":{},"sourceType":"module"}
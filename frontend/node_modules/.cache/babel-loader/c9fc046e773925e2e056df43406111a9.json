{"ast":null,"code":"var _jsxFileName = \"/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/RegistrationForm.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, website));\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input, {\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input, {\n      type: \"password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Habitual Residence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, getFieldDecorator('residence', {\n      initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n      rules: [{\n        type: 'array',\n        required: true,\n        message: 'Please select your habitual residence!'\n      }]\n    })(React.createElement(Cascader, {\n      options: residences,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create({\n  name: 'register'\n})(RegistrationForm);\nexport default WrappedRegistrationForm;","map":{"version":3,"sources":["/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/RegistrationForm.js"],"names":["React","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","residences","value","label","children","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","message","required","validator","whitespace","valuePropName","WrappedRegistrationForm","create","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAO,aAAP;AACA,SACIC,IADJ,EACUC,KADV,EACiBC,OADjB,EAC0BC,IAD1B,EACgCC,QADhC,EAC0CC,MAD1C,EACkDC,GADlD,EACuDC,GADvD,EAC4DC,QAD5D,EACsEC,MADtE,EAC8EC,YAD9E,QAEO,MAFP;MAIOC,M,GAAUN,M,CAAVM,M;AACP,MAAMC,kBAAkB,GAAGF,YAAY,CAACC,MAAxC;AAEA,MAAME,UAAU,GAAG,CAAC;AAChBC,EAAAA,KAAK,EAAE,UADS;AAEhBC,EAAAA,KAAK,EAAE,UAFS;AAGhBC,EAAAA,QAAQ,EAAE,CAAC;AACPF,IAAAA,KAAK,EAAE,UADA;AAEPC,IAAAA,KAAK,EAAE,UAFA;AAGPC,IAAAA,QAAQ,EAAE,CAAC;AACPF,MAAAA,KAAK,EAAE,MADA;AAEPC,MAAAA,KAAK,EAAE;AAFA,KAAD;AAHH,GAAD;AAHM,CAAD,EAWhB;AACCD,EAAAA,KAAK,EAAE,SADR;AAECC,EAAAA,KAAK,EAAE,SAFR;AAGCC,EAAAA,QAAQ,EAAE,CAAC;AACPF,IAAAA,KAAK,EAAE,SADA;AAEPC,IAAAA,KAAK,EAAE,SAFA;AAGPC,IAAAA,QAAQ,EAAE,CAAC;AACPF,MAAAA,KAAK,EAAE,aADA;AAEPC,MAAAA,KAAK,EAAE;AAFA,KAAD;AAHH,GAAD;AAHX,CAXgB,CAAnB;;AAwBA,MAAME,gBAAN,SAA+BlB,KAAK,CAACmB,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC3CC,KAD2C,GACnC;AACJC,MAAAA,YAAY,EAAE,KADV;AAEJC,MAAAA,kBAAkB,EAAE;AAFhB,KADmC;;AAAA,SAM3CC,YAN2C,GAM3BC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,uBAAhB,CAAwC,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACrD,YAAI,CAACD,GAAL,EAAU;AACNE,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACH;AACJ,OAJD;AAKH,KAb0C;;AAAA,SAe3CG,iBAf2C,GAetBT,CAAD,IAAO;AACvB,YAAMT,KAAK,GAAGS,CAAC,CAACU,MAAF,CAASnB,KAAvB;AACA,WAAKoB,QAAL,CAAc;AAACd,QAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,IAA2B,CAAC,CAACN;AAA5C,OAAd;AACH,KAlB0C;;AAAA,SAoB3CqB,sBApB2C,GAoBlB,CAACC,IAAD,EAAOtB,KAAP,EAAcuB,QAAd,KAA2B;AAChD,YAAMX,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;;AACA,UAAIZ,KAAK,IAAIA,KAAK,KAAKY,IAAI,CAACY,aAAL,CAAmB,UAAnB,CAAvB,EAAuD;AACnDD,QAAAA,QAAQ,CAAC,+CAAD,CAAR;AACH,OAFD,MAEO;AACHA,QAAAA,QAAQ;AACX;AACJ,KA3B0C;;AAAA,SA6B3CE,sBA7B2C,GA6BlB,CAACH,IAAD,EAAOtB,KAAP,EAAcuB,QAAd,KAA2B;AAChD,YAAMX,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;;AACA,UAAIZ,KAAK,IAAI,KAAKK,KAAL,CAAWC,YAAxB,EAAsC;AAClCM,QAAAA,IAAI,CAACc,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAjC;AACH;;AACDJ,MAAAA,QAAQ;AACX,KAnC0C;;AAAA,SAqC3CK,mBArC2C,GAqCpB5B,KAAD,IAAW;AAC7B,UAAIO,kBAAJ;;AACA,UAAI,CAACP,KAAL,EAAY;AACRO,QAAAA,kBAAkB,GAAG,EAArB;AACH,OAFD,MAEO;AACHA,QAAAA,kBAAkB,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyBsB,GAAzB,CAA6BC,MAAM,cAAO9B,KAAP,SAAe8B,MAAf,CAAnC,CAArB;AACH;;AACD,WAAKV,QAAL,CAAc;AAACb,QAAAA;AAAD,OAAd;AACH,KA7C0C;AAAA;;AA+C3CwB,EAAAA,MAAM,GAAG;AAAA,UACEC,iBADF,GACuB,KAAKrB,KAAL,CAAWC,IADlC,CACEoB,iBADF;AAAA,UAEEzB,kBAFF,GAEwB,KAAKF,KAF7B,CAEEE,kBAFF;AAIL,UAAM0B,cAAc,GAAG;AACnBC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,EAAE,EAAE;AAACC,UAAAA,IAAI,EAAE;AAAP,SADE;AAENC,QAAAA,EAAE,EAAE;AAACD,UAAAA,IAAI,EAAE;AAAP;AAFE,OADS;AAKnBE,MAAAA,UAAU,EAAE;AACRH,QAAAA,EAAE,EAAE;AAACC,UAAAA,IAAI,EAAE;AAAP,SADI;AAERC,QAAAA,EAAE,EAAE;AAACD,UAAAA,IAAI,EAAE;AAAP;AAFI;AALO,KAAvB;AAUA,UAAMG,kBAAkB,GAAG;AACvBD,MAAAA,UAAU,EAAE;AACRH,QAAAA,EAAE,EAAE;AACAC,UAAAA,IAAI,EAAE,EADN;AAEAI,UAAAA,MAAM,EAAE;AAFR,SADI;AAKRH,QAAAA,EAAE,EAAE;AACAD,UAAAA,IAAI,EAAE,EADN;AAEAI,UAAAA,MAAM,EAAE;AAFR;AALI;AADW,KAA3B;AAYA,UAAMC,cAAc,GAAGT,iBAAiB,CAAC,QAAD,EAAW;AAC/CU,MAAAA,YAAY,EAAE;AADiC,KAAX,CAAjB,CAGnB,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,CAHmB,CAAvB;AASA,UAAMC,cAAc,GAAGrC,kBAAkB,CAACsB,GAAnB,CAAuBgB,OAAO,IACjD,oBAAC,kBAAD;AAAoB,MAAA,GAAG,EAAEA,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCA,OAAnC,CADmB,CAAvB;AAIA,WACI,oBAAC,IAAD,oBAAUZ,cAAV;AAA0B,MAAA,QAAQ,EAAE,KAAKzB,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,QADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKwB,iBAAiB,CAAC,OAAD,EAAU;AACxBc,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,OADF;AACWC,QAAAA,OAAO,EAAE;AADpB,OAAD,EAEJ;AACCC,QAAAA,QAAQ,EAAE,IADX;AACiBD,QAAAA,OAAO,EAAE;AAD1B,OAFI;AADiB,KAAV,CAAjB,CAOG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPH,CAHL,CADJ,EAcI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,UADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKhB,iBAAiB,CAAC,UAAD,EAAa;AAC3Bc,MAAAA,KAAK,EAAE,CAAC;AACJG,QAAAA,QAAQ,EAAE,IADN;AACYD,QAAAA,OAAO,EAAE;AADrB,OAAD,EAEJ;AACCE,QAAAA,SAAS,EAAE,KAAKzB;AADjB,OAFI;AADoB,KAAb,CAAjB,CAOG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPH,CAHL,CAdJ,EA2BI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,kBADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKO,iBAAiB,CAAC,SAAD,EAAY;AAC1Bc,MAAAA,KAAK,EAAE,CAAC;AACJG,QAAAA,QAAQ,EAAE,IADN;AACYD,QAAAA,OAAO,EAAE;AADrB,OAAD,EAEJ;AACCE,QAAAA,SAAS,EAAE,KAAK7B;AADjB,OAFI;AADmB,KAAZ,CAAjB,CAOG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,MAAM,EAAE,KAAKH,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPH,CAHL,CA3BJ,EAwCI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEI,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACZ,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY,CAFJ,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUKc,iBAAiB,CAAC,UAAD,EAAa;AAC3Bc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE,6BAA1B;AAAyDG,QAAAA,UAAU,EAAE;AAArE,OAAD;AADoB,KAAb,CAAjB,CAGG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,CAVL,CAxCJ,EAwDI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,oBADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKnB,iBAAiB,CAAC,WAAD,EAAc;AAC5BU,MAAAA,YAAY,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,MAAzB,CADc;AAE5BI,MAAAA,KAAK,EAAE,CAAC;AAACC,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,QAAQ,EAAE,IAA1B;AAAgCD,QAAAA,OAAO,EAAE;AAAzC,OAAD;AAFqB,KAAd,CAAjB,CAIG,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEjD,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJH,CAHL,CAxDJ,EAkEI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKiC,iBAAiB,CAAC,OAAD,EAAU;AACxBc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE;AAA1B,OAAD;AADiB,KAAV,CAAjB,CAGG,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAEP,cAApB;AAAoC,MAAA,KAAK,EAAE;AAACE,QAAAA,KAAK,EAAE;AAAR,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,CAHL,CAlEJ,EA2EI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,SADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKX,iBAAiB,CAAC,SAAD,EAAY;AAC1Bc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE;AAA1B,OAAD;AADmB,KAAZ,CAAjB,CAGG,oBAAC,YAAD;AACI,MAAA,UAAU,EAAEJ,cADhB;AAEI,MAAA,QAAQ,EAAE,KAAKhB,mBAFnB;AAGI,MAAA,WAAW,EAAC,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAHH,CAHL,CA3EJ,EA0FI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EAAC,SADV;AAEI,MAAA,KAAK,EAAC,0CAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKI,iBAAiB,CAAC,SAAD,EAAY;AAC1Bc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE;AAA1B,OAAD;AADmB,KAAZ,CAAjB,CAGG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,CADL,CADJ,EAQI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CARJ,CAJJ,CA1FJ,EA2GI,oBAAC,IAAD,CAAM,IAAN,oBAAeT,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKP,iBAAiB,CAAC,WAAD,EAAc;AAC5BoB,MAAAA,aAAa,EAAE;AADa,KAAd,CAAjB,CAGG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0B;AAAG,MAAA,IAAI,EAAC,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA1B,CAHH,CADL,CA3GJ,EAkHI,oBAAC,IAAD,CAAM,IAAN,oBAAeb,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAlHJ,CADJ;AAwHH;;AA9M0C;;AAiN/C,MAAMc,uBAAuB,GAAGnE,IAAI,CAACoE,MAAL,CAAY;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAZ,EAAgCpD,gBAAhC,CAAhC;AAEA,eAAekD,uBAAf","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport {\n    Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete,\n} from 'antd';\n\nconst {Option} = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [{\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [{\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [{\n            value: 'xihu',\n            label: 'West Lake',\n        }],\n    }],\n}, {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [{\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [{\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n        }],\n    }],\n}];\n\nclass RegistrationForm extends React.Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    }\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    }\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    }\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], {force: true});\n        }\n        callback();\n    }\n\n    handleWebsiteChange = (value) => {\n        let autoCompleteResult;\n        if (!value) {\n            autoCompleteResult = [];\n        } else {\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n        }\n        this.setState({autoCompleteResult});\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const {autoCompleteResult} = this.state;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '86',\n        })(\n            <Select style={{width: 70}}>\n                <Option value=\"86\">+86</Option>\n                <Option value=\"87\">+87</Option>\n            </Select>\n        );\n\n        const websiteOptions = autoCompleteResult.map(website => (\n            <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n        ));\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                <Form.Item\n                    label=\"E-mail\"\n                >\n                    {getFieldDecorator('email', {\n                        rules: [{\n                            type: 'email', message: 'The input is not valid E-mail!',\n                        }, {\n                            required: true, message: 'Please input your E-mail!',\n                        }],\n                    })(\n                        <Input/>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Password\"\n                >\n                    {getFieldDecorator('password', {\n                        rules: [{\n                            required: true, message: 'Please input your password!',\n                        }, {\n                            validator: this.validateToNextPassword,\n                        }],\n                    })(\n                        <Input type=\"password\"/>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Confirm Password\"\n                >\n                    {getFieldDecorator('confirm', {\n                        rules: [{\n                            required: true, message: 'Please confirm your password!',\n                        }, {\n                            validator: this.compareToFirstPassword,\n                        }],\n                    })(\n                        <Input type=\"password\" onBlur={this.handleConfirmBlur}/>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label={(\n                        <span>\n              Nickname&nbsp;\n                            <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\"/>\n              </Tooltip>\n            </span>\n                    )}\n                >\n                    {getFieldDecorator('nickname', {\n                        rules: [{required: true, message: 'Please input your nickname!', whitespace: true}],\n                    })(\n                        <Input/>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Habitual Residence\"\n                >\n                    {getFieldDecorator('residence', {\n                        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n                        rules: [{type: 'array', required: true, message: 'Please select your habitual residence!'}],\n                    })(\n                        <Cascader options={residences}/>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Phone Number\"\n                >\n                    {getFieldDecorator('phone', {\n                        rules: [{required: true, message: 'Please input your phone number!'}],\n                    })(\n                        <Input addonBefore={prefixSelector} style={{width: '100%'}}/>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Website\"\n                >\n                    {getFieldDecorator('website', {\n                        rules: [{required: true, message: 'Please input website!'}],\n                    })(\n                        <AutoComplete\n                            dataSource={websiteOptions}\n                            onChange={this.handleWebsiteChange}\n                            placeholder=\"website\"\n                        >\n                            <Input/>\n                        </AutoComplete>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Captcha\"\n                    extra=\"We must make sure that your are a human.\"\n                >\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            {getFieldDecorator('captcha', {\n                                rules: [{required: true, message: 'Please input the captcha you got!'}],\n                            })(\n                                <Input/>\n                            )}\n                        </Col>\n                        <Col span={12}>\n                            <Button>Get captcha</Button>\n                        </Col>\n                    </Row>\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    {getFieldDecorator('agreement', {\n                        valuePropName: 'checked',\n                    })(\n                        <Checkbox>I have read the <a href=\"\">agreement</a></Checkbox>\n                    )}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nconst WrappedRegistrationForm = Form.create({name: 'register'})(RegistrationForm);\n\nexport default WrappedRegistrationForm;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/RegistrationForm.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, website));\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create({\n  name: 'register'\n})(RegistrationForm);\nexport default WrappedRegistrationForm;","map":{"version":3,"sources":["/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/RegistrationForm.js"],"names":["React","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","message","required","WrappedRegistrationForm","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport {\n    Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete,\n} from 'antd';\n\nconst {Option} = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    }\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    }\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    }\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], {force: true});\n        }\n        callback();\n    }\n\n    handleWebsiteChange = (value) => {\n        let autoCompleteResult;\n        if (!value) {\n            autoCompleteResult = [];\n        } else {\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n        }\n        this.setState({autoCompleteResult});\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const {autoCompleteResult} = this.state;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '86',\n        })(\n            <Select style={{width: 70}}>\n                <Option value=\"86\">+86</Option>\n                <Option value=\"87\">+87</Option>\n            </Select>\n        );\n\n        const websiteOptions = autoCompleteResult.map(website => (\n            <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n        ));\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                <Form.Item\n                    label=\"E-mail\"\n                >\n                    {getFieldDecorator('email', {\n                        rules: [{\n                            type: 'email', message: 'The input is not valid E-mail!',\n                        }, {\n                            required: true, message: 'Please input your E-mail!',\n                        }],\n                    })(\n                        <Input/>\n                    )}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nconst WrappedRegistrationForm = Form.create({name: 'register'})(RegistrationForm);\n\nexport default WrappedRegistrationForm;"]},"metadata":{},"sourceType":"module"}
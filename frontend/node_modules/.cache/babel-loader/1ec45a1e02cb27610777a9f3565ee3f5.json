{"ast":null,"code":"import _objectSpread from \"/Users/zhangjunjie/WebstormProjects/eims-react1/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/MyTable.js\";\nimport React, { Component } from 'react';\nimport { Button, Icon, Input, Table } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport reqwest from 'reqwest';\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  sorter: true,\n  render: name => \"\".concat(name.first, \" \").concat(name.last),\n  width: '20%'\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  filters: [{\n    text: 'Male',\n    value: 'male'\n  }, {\n    text: 'Female',\n    value: 'female'\n  }],\n  width: '20%'\n}, {\n  title: 'Email',\n  dataIndex: 'email'\n}];\n\nclass MyTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetch = (params = {}) => {\n      console.log('params:', params);\n      this.setState({\n        loading: true\n      });\n      reqwest({\n        url: 'https://randomuser.me/api',\n        method: 'get',\n        data: _objectSpread({\n          results: 10\n        }, params),\n        type: 'json'\n      }).then(data => {\n        const pagination = _objectSpread({}, this.state.pagination); // Read total count from server\n        // pagination.total = data.totalCount;\n\n\n        pagination.total = 200;\n        this.setState({\n          loading: false,\n          data: data.results,\n          pagination\n        });\n      });\n    };\n\n    this.handleTableChange = (pagination, filters, sorter) => {\n      const pager = _objectSpread({}, this.state.pagination);\n\n      pager.current = pagination.current;\n      this.setState({\n        pagination: pager\n      });\n      this.fetch(_objectSpread({\n        results: pagination.pageSize,\n        page: pagination.current,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }, filters));\n    };\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0]\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })\n    });\n\n    this.state = {\n      data: [],\n      pagination: {},\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetch();\n  }\n\n  render() {\n    /*const columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        width: '30%',\n        ...this.getColumnSearchProps('name'),\n    }, {\n        title: 'Age',\n        dataIndex: 'age',\n        key: 'age',\n        width: '20%',\n        ...this.getColumnSearchProps('age'),\n    }, {\n        title: 'Gender',\n        dataIndex: 'gender',\n        key: 'gender',\n        ...this.getColumnSearchProps('gender'),\n    }, {\n        title: 'Department',\n        dataIndex: 'department',\n        key: 'department',\n        ...this.getColumnSearchProps('department'),\n    }, {\n        title: 'Level',\n        dataIndex: 'level',\n        key: 'level',\n        ...this.getColumnSearchProps('level'),\n    }];\n    //const data = this.props;\n    const data = [{\n        key: '1',\n        name: 'John Brown',\n        age: 32,\n        gender: '男',\n        department: '采购部',\n        level: '经理'\n    }, {\n        key: '2',\n        name: 'Joe Black',\n        age: 42,\n        gender: '男',\n        department: '行政部',\n        level: '董事长'\n    }];*/\n    return React.createElement(Table, {\n      columns: columns,\n      rowKey: record => record.login.uuid,\n      dataSource: this.state.data,\n      pagination: this.state.pagination,\n      loading: this.state.loading,\n      onChange: this.handleTableChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    });\n  }\n\n}\n\nMyTable.searchUrl = 'http://localhost:8888/employee';\nexport default MyTable;","map":{"version":3,"sources":["/Users/zhangjunjie/WebstormProjects/eims-react1/src/components/MyTable.js"],"names":["React","Component","Button","Icon","Input","Table","Highlighter","reqwest","columns","title","dataIndex","sorter","render","name","first","last","width","filters","text","value","MyTable","constructor","props","fetch","params","console","log","setState","loading","url","method","data","results","type","then","pagination","state","total","handleTableChange","pager","current","pageSize","page","sortField","field","sortOrder","order","handleSearch","selectedKeys","confirm","searchText","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","padding","node","searchInput","e","target","marginBottom","display","marginRight","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","backgroundColor","componentDidMount","login","uuid","searchUrl"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Icon, Input, Table} from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport reqwest from 'reqwest';\n\nconst columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: true,\n    render: name => `${name.first} ${name.last}`,\n    width: '20%',\n}, {\n    title: 'Gender',\n    dataIndex: 'gender',\n    filters: [\n        { text: 'Male', value: 'male' },\n        { text: 'Female', value: 'female' },\n    ],\n    width: '20%',\n}, {\n    title: 'Email',\n    dataIndex: 'email',\n}];\n\nclass MyTable extends Component {\n\n    static searchUrl = 'http://localhost:8888/employee';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            pagination: {},\n            loading: false,\n        };\n    };\n\n    componentDidMount() {\n        this.fetch();\n    }\n\n    fetch = (params = {}) => {\n        console.log('params:', params);\n        this.setState({ loading: true });\n        reqwest({\n            url: 'https://randomuser.me/api',\n            method: 'get',\n            data: {\n                results: 10,\n                ...params,\n            },\n            type: 'json',\n        }).then((data) => {\n            const pagination = { ...this.state.pagination };\n            // Read total count from server\n            // pagination.total = data.totalCount;\n            pagination.total = 200;\n            this.setState({\n                loading: false,\n                data: data.results,\n                pagination,\n            });\n        });\n    };\n\n    handleTableChange = (pagination, filters, sorter) => {\n        const pager = { ...this.state.pagination };\n        pager.current = pagination.current;\n        this.setState({\n            pagination: pager,\n        });\n        this.fetch({\n            results: pagination.pageSize,\n            page: pagination.current,\n            sortField: sorter.field,\n            sortOrder: sorter.order,\n            ...filters,\n        });\n    };\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({searchText: selectedKeys[0]});\n    };\n\n    handleReset = (clearFilters) => {\n        clearFilters();\n        this.setState({searchText: ''});\n    };\n\n    getColumnSearchProps = (dataIndex) => ({\n        filterDropdown: ({\n                             setSelectedKeys, selectedKeys, confirm, clearFilters,\n                         }) => (\n            <div style={{padding: 8}}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{width: 188, marginBottom: 8, display: 'block'}}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{width: 90, marginRight: 8}}\n                >\n                    Search\n                </Button>\n                <Button\n                    onClick={() => this.handleReset(clearFilters)}\n                    size=\"small\"\n                    style={{width: 90}}\n                >\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => <Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}}/>,\n        onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: (visible) => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: (text) => (\n            <Highlighter\n                highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });\n\n    render() {\n        /*const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            width: '30%',\n            ...this.getColumnSearchProps('name'),\n        }, {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n            width: '20%',\n            ...this.getColumnSearchProps('age'),\n        }, {\n            title: 'Gender',\n            dataIndex: 'gender',\n            key: 'gender',\n            ...this.getColumnSearchProps('gender'),\n        }, {\n            title: 'Department',\n            dataIndex: 'department',\n            key: 'department',\n            ...this.getColumnSearchProps('department'),\n        }, {\n            title: 'Level',\n            dataIndex: 'level',\n            key: 'level',\n            ...this.getColumnSearchProps('level'),\n        }];\n        //const data = this.props;\n        const data = [{\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            gender: '男',\n            department: '采购部',\n            level: '经理'\n        }, {\n            key: '2',\n            name: 'Joe Black',\n            age: 42,\n            gender: '男',\n            department: '行政部',\n            level: '董事长'\n        }];*/\n        return (\n            <Table\n                columns={columns}\n                rowKey={record => record.login.uuid}\n                dataSource={this.state.data}\n                pagination={this.state.pagination}\n                loading={this.state.loading}\n                onChange={this.handleTableChange}\n            />\n        )\n    };\n}\n\nexport default MyTable;"]},"metadata":{},"sourceType":"module"}
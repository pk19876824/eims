{"version":3,"sources":["components/AddEmployeeForm.js","components/MyTable.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","AddEmployeeForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showDrawer","setState","visible","onClose","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","fetch","params","arguments","length","undefined","reqwest","url","ADD_EMPLOYEE_URL","method","data","objectSpread","type","then","status","code","updateTableData","alert","msg","state","bind","assertThisInitialized","getFieldDecorator","react_default","a","createElement","es_button","onClick","icon","drawer","title","width","es_form","assign","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","input","es_select","placeholder","value","date_picker","style","position","left","bottom","borderTop","padding","background","textAlign","marginRight","htmlType","React","Component","Form","create","MyTable","getTableData","loading","results","success","pagination","total","count","error","handleTableChange","filters","sorter","pager","current","pageSize","page","sortField","field","sortOrder","order","onSelectChange","selectedRowKeys","confirmVisible","confirmLoading","showDeleteConfirmModal","handleDeleteCancel","handleDeleteOk","_this2","ids","Array","from","_this$state","deleteLoading","rowSelection","onChange","hasSelected","disabled","margin","marginLeft","concat","modal","onOk","onCancel","okType","float","components_AddEmployeeForm","table","bordered","columns","dataIndex","render","name","text","rowKey","record","id","dataSource","Header","Layout","Content","Footer","App","layout","className","color","minHeight","components_MyTable","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.835bee5e.chunk.js","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport {\n    Drawer, Form, Button, Col, Row, Input, Select, DatePicker, Icon,\n} from 'antd';\nimport reqwest from 'reqwest';\n\n\nconst {Option} = Select;\n\nclass AddEmployeeForm extends React.Component {\n\n    static ADD_EMPLOYEE_URL = \"http://localhost:8888/employee\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n        };\n        this.updateTableData = this.updateTableData.bind(this);\n    }\n\n\n    showDrawer = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.fetch(values);\n            }\n        });\n    };\n\n    fetch = (params = {}) => {\n        console.log('params:', params);\n        reqwest({\n            url: AddEmployeeForm.ADD_EMPLOYEE_URL,\n            method: 'post',\n            data: {\n                ...params,\n            },\n            type: 'json',\n        }).then((data) => {\n            if (data.status.code === 0) {\n                this.setState({\n                    visible: false,\n                });\n                this.updateTableData();\n            } else {\n                alert(data.status.msg);\n            }\n        });\n    };\n\n    updateTableData() {\n        this.props.updateTableData();\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        };\n        return (\n            <div>\n                <Button type=\"primary\" onClick={this.showDrawer}>\n                    <Icon type=\"plus\"/>添加员工\n                </Button>\n                <Drawer\n                    title=\"添加员工\"\n                    width={400}\n                    onClose={this.onClose}\n                    visible={this.state.visible}\n                >\n                    <Form {...formItemLayout} onSubmit={this.handleSubmit.bind(this)}>\n                        <Form.Item\n                            label=\"姓名\"\n                        >\n                            {getFieldDecorator('name', {\n                                rules: [{\n                                    required: true, message: '请输入姓名!',\n                                }],\n                            })(\n                                <Input/>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"性别\">\n                            {getFieldDecorator('gender', {\n                                rules: [{\n                                    required: true, message: '请选择性别!',\n                                }],\n                            })(\n                                <Select placeholder=\"请选择性别\">\n                                    <Option value=\"0\">男</Option>\n                                    <Option value=\"1\">女</Option>\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"出生日期\">\n                            {getFieldDecorator('birthday', {\n                                rules: [{\n                                    required: true, message: '请选择出生日期!',\n                                }],\n                            })(\n                                <DatePicker placeholder=\"请选择生日\"/>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"部门\">\n                            {getFieldDecorator('department', {\n                                rules: [{\n                                    required: true, message: '请选择部门!',\n                                }],\n                            })(\n                                <Select placeholder=\"请选择部门\">\n                                    <Option value=\"1\">产品部</Option>\n                                    <Option value=\"2\">技术部</Option>\n                                    <Option value=\"3\">运营部</Option>\n                                    <Option value=\"4\">行政部</Option>\n                                    <Option value=\"5\">采购部</Option>\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"职位\">\n                            {getFieldDecorator('level', {\n                                rules: [{\n                                    required: true, message: '请选择职位!',\n                                }],\n                            })(\n                                <Select placeholder=\"请选择职位\">\n                                    <Option value=\"1\">普通职员</Option>\n                                    <Option value=\"2\">组长</Option>\n                                    <Option value=\"3\">经理</Option>\n                                    <Option value=\"4\">总监</Option>\n                                    <Option value=\"5\">董事长</Option>\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <div\n                            style={{\n                                position: 'absolute',\n                                left: 0,\n                                bottom: 0,\n                                width: '100%',\n                                borderTop: '1px solid #e9e9e9',\n                                padding: '10px 16px',\n                                background: '#fff',\n                                textAlign: 'right',\n                            }}\n                        >\n                            <Button onClick={this.onClose} style={{marginRight: 8}}>\n                                取消\n                            </Button>\n                            <Button htmlType=\"submit\" type=\"primary\">\n                                确定\n                            </Button>\n                        </div>\n                    </Form>\n                </Drawer>\n            </div>\n        );\n    }\n}\n\n//const WrappedAddEmployeeForm = Form.create({name: 'register'})(AddEmployeeForm);\n//export default WrappedAddEmployeeForm;\nexport default Form.create()(AddEmployeeForm);","import React, {Component} from 'react';\nimport {Button, Modal, Table} from 'antd';\nimport reqwest from 'reqwest';\nimport AddEmployeeForm from './AddEmployeeForm'\n\nclass MyTable extends Component {\n\n    static url = 'http://localhost:8888/employee';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            pagination: {},\n            loading: false,\n            selectedRowKeys: [],\n            confirmVisible: false,\n            confirmLoading: false,\n        };\n        //this.handleDelete = this.handleDelete.bind(this);\n        //this.showDeleteConfirm = this.showDeleteConfirm.bind(this);\n        this.showDeleteConfirmModal = this.showDeleteConfirmModal.bind(this);\n        this.handleDeleteCancel = this.handleDeleteCancel.bind(this);\n        this.handleDeleteOk = this.handleDeleteOk.bind(this);\n    };\n\n    componentDidMount() {\n        this.getTableData();\n    }\n\n    getTableData = (params = {}) => {\n        console.log('params:', params);\n        this.setState({loading: true});\n        reqwest({\n            url: MyTable.url,\n            method: 'get',\n            data: {\n                results: 10,\n                ...params,\n            },\n            type: 'json',\n            success: (data) => {\n                const pagination = {...this.state.pagination};\n                if (data.status.code === 0) {\n                    // Read total count from server\n                    // pagination.total = data.totalCount;\n                    pagination.total = data.data.count;\n                    this.setState({\n                        data: data.data.results,\n                        pagination,\n                        loading: false\n                    });\n                } else {\n                    alert(data.status.msg);\n                    this.setState({\n                        loading: false\n                    });\n                }\n            },\n            error: (e) => {\n                console.log(e);\n                this.setState({\n                    loading: false\n                })\n            }\n        });\n    };\n\n    /*handleDelete() {\n        this.setState({\n            deleteLoading: true\n        });\n        const {selectedRowKeys} = this.state;\n        const selectedCount = selectedRowKeys.length;\n        confirm({\n            title: '确定删除这' + selectedCount + '个员工?',\n            //content: selectedRowKeys,\n            okText: '确定',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk() {\n                console.log(\"selectedRowKeys:\" + Array.from(selectedRowKeys));\n                reqwest({\n                    url: MyTable.url,\n                    method: 'delete',\n                    data: {\n                        ids: Array.from(selectedRowKeys)\n                    },\n                    type: 'json',\n                    success: (data) => {\n                        console.log(data);\n                        this.setState({\n                            deleteLoading: false,\n                            data: []\n                        })\n                    },\n                    error: (e) => {\n                        console.log(e);\n                    }\n                });\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    }*/\n\n    showDeleteConfirmModal() {\n        this.setState({\n            confirmVisible: true,\n        })\n    }\n\n    handleDeleteOk() {\n        const {selectedRowKeys} = this.state;\n        this.setState({\n            confirmLoading: true,\n        });\n        reqwest({\n            url: MyTable.url,\n            method: 'delete',\n            data: {\n                ids: Array.from(selectedRowKeys)\n            },\n            type: 'json',\n            success: (data) => {\n                console.log(data);\n                this.setState({\n                    confirmVisible: false,\n                    confirmLoading: false,\n                    selectedRowKeys: [],\n                    data: []\n                })\n            },\n            error: (e) => {\n                console.log(e);\n            }\n        }).then(() => {\n            this.getTableData();\n        });\n    };\n\n    handleDeleteCancel() {\n        this.setState({\n            confirmVisible: false,\n        })\n    }\n\n    handleTableChange = (pagination, filters, sorter) => {\n        console.log(\"filters:\" + filters);\n        console.log(\"sorter:\" + sorter);\n\n        const pager = {...this.state.pagination};\n        pager.current = pagination.current;\n        this.setState({\n            pagination: pager,\n        });\n        this.getTableData({\n            results: pagination.pageSize,\n            page: pagination.current,\n            sortField: sorter.field,\n            sortOrder: sorter.order,\n            ...filters,\n        });\n    };\n\n    onSelectChange = (selectedRowKeys) => {\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({selectedRowKeys});\n    };\n\n    render() {\n        const columns = [{\n            title: '姓名',\n            dataIndex: 'name',\n            render: name => `${name}`,\n            width: '20%',\n        }, {\n            title: '年龄',\n            dataIndex: 'age',\n            sorter: true,\n            width: '20%'\n        }, {\n            title: '性别',\n            dataIndex: 'gender',\n            filters: [\n                {text: 'Male', value: '0'},\n                {text: 'Female', value: '1'},\n            ],\n            width: '20%',\n        }, {\n            title: '部门',\n            dataIndex: 'department',\n            filters: [\n                {text: '产品部', value: '1'},\n                {text: '技术部', value: '2'},\n                {text: '运营部', value: '3'},\n                {text: '行政部', value: '4'},\n                {text: '采购部', value: '5'},\n            ],\n            width: '20%',\n        }, {\n            title: '职位',\n            dataIndex: 'level',\n            filters: [\n                {text: '普通职员', value: '1'},\n                {text: '组长', value: '2'},\n                {text: '经理', value: '3'},\n                {text: '总监', value: '4'},\n                {text: '董事长', value: '5'},\n            ],\n            width: '20%',\n        },];\n\n        const {\n            deleteLoading,\n            selectedRowKeys,\n            confirmVisible,\n            confirmLoading,\n            data,\n            pagination,\n            loading\n        } = this.state;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n\n\n        return (\n            <div>\n                <div>\n                    <Button\n                        type=\"primary\"\n                        onClick={this.showDeleteConfirmModal}\n                        disabled={!hasSelected}\n                        loading={deleteLoading}\n                        style={{margin: '10px 10px 10px 10px'}}\n                    >\n                        Delete\n                    </Button>\n                    <span style={{marginLeft: 8}}>\n                        {hasSelected ? `选择 ${selectedRowKeys.length} 项` : ''}\n                    </span>\n                    <Modal\n                        title=\"确认删除？\"\n                        visible={confirmVisible}\n                        confirmLoading={confirmLoading}\n                        onOk={this.handleDeleteOk}\n                        onCancel={this.handleDeleteCancel}\n                        okType=\"danger\"\n                    >\n                        <p>删除后将无法恢复</p>\n                    </Modal>\n                    <div style={{padding: '10px 10px', float: \"right\"}}>\n                        <AddEmployeeForm updateTableData={this.getTableData.bind(this)}/>\n                    </div>\n                </div>\n                <Table\n                    rowSelection={rowSelection}\n                    bordered={true}\n                    columns={columns}\n                    rowKey={record => record.id}\n                    dataSource={data}\n                    pagination={pagination}\n                    loading={loading}\n                    onChange={this.handleTableChange}\n                />\n            </div>\n\n        )\n    };\n}\n\nexport default MyTable;","import React from 'react';\nimport {Layout} from 'antd';\nimport \"antd/dist/antd.css\";\nimport MyTable from './components/MyTable'\nimport AddEmployeeForm from './components/AddEmployeeForm'\n\nconst {Header, Content, Footer} = Layout;\n\nfunction App() {\n    return (\n        <Layout className=\"layout\">\n            <Header>\n                <h1 style={{color: \"white\", textAlign: \"center\"}}>员工信息管理系统</h1>\n            </Header>\n            <Content style={{padding: '0 50px'}}>\n                <div style={{background: '#fff', padding: 24, minHeight: 800}}>\n                    <MyTable/>\n                </div>\n            </Content>\n            <Footer style={{textAlign: 'center'}}>\n                Employee Information Management System ©2019 Created by React\n            </Footer>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}